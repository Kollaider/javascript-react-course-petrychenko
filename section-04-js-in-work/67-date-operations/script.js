'use strict';

// ==============================================
// 1. Создание объектов Date
// ==============================================

// Текущая дата и время
const now = new Date();
console.log(now); // Пример: 2025-04-18T22:14:44.526Z

// Дата из строки (формат ISO 8601)
const now2 = new Date('2025-04-17');
console.log(now2); // 2025-04-17T00:00:00.000Z

// Дата из отдельных компонентов
const now3 = new Date(2025, 5, 18, 20); // Месяцы: 0-11 (январь=0)
console.log(now3); // 2025-06-18T17:00:00.000Z (часовой пояс UTC)

// Дата из timestamp (миллисекунды с 1 января 1970 UTC)
const now4 = new Date(0);
console.log(now4); // 1970-01-01T00:00:00.000Z (эпоха Unix)

// ==============================================
// 2. Методы получения компонентов даты (геттеры)
// ==============================================

console.log(now.getFullYear());  // Год (4 цифры) - 2025
console.log(now.getMonth());     // Месяц (0-11) - 3 (апрель)
console.log(now.getDate());      // День месяца (1-31) - 19
console.log(now.getHours());     // Часы (0-23) - локальное время
console.log(now.getMinutes());   // Минуты (0-59)
console.log(now.getSeconds());   // Секунды (0-59)
console.log(now.getMilliseconds()); // Миллисекунды (0-999)
console.log(now.getDay());       // День недели (0-6, вс=0) - 6 (суббота)

// UTC-версии методов (без учета часового пояса)
console.log(now.getUTCHours());  // Часы по UTC - 22 (01:25 локальное)

// Разница с UTC в минутах
console.log(now.getTimezoneOffset()); // -180 (UTC+3 часа)

// Timestamp (миллисекунды с 1970)
console.log(now.getTime()); // 1745015230028

// ==============================================
// 3. Методы установки компонентов даты (сеттеры)
// ==============================================

now.setHours(18); // Установка часов (учитывает локальный часовой пояс)
now.setHours(40); // Автоматически корректирует дату (40-24=16, +1 день)

// Аналогичные методы:
// setFullYear(), setMonth(), setDate(), 
// setMinutes(), setSeconds(), setMilliseconds()
// setTime() - установка по timestamp

// UTC-версии сеттеров
now.setUTCHours(12); // Установка часов по UTC

// ==============================================
// 4. Измерение времени выполнения
// ==============================================

let start = new Date();

// Имитация тяжелой операции
for (let i = 0; i < 100000; i++) {
    let some = i ** 3;
}

let end = new Date();

console.log(`Цикл отработал за: ${end - start} миллисекунд`);

// ==============================================
// 5. Форматирование дат
// ==============================================

// Локализованное строковое представление
console.log(now.toLocaleString()); // "19.04.2025, 01:25:44"
console.log(now.toLocaleDateString()); // "19.04.2025"
console.log(now.toLocaleTimeString()); // "01:25:44"

// ISO формат
console.log(now.toISOString()); // "2025-04-18T22:14:44.526Z"

// ==============================================
// 6. Дополнительные возможности
// ==============================================

// Разница между датами
const diff = new Date(now - now2);
console.log(`Разница: ${diff.getUTCDate()-1} дней`);

// Современная альтернатива - performance.now() (более точная)
const perfStart = performance.now();
// ... код ...
const perfEnd = performance.now();
console.log(`Выполнение заняло ${perfEnd - perfStart} мс`);

/*
Лучшие практики работы с датами:
1. Для сложных операций с датами используйте библиотеки:
   - date-fns (модульная)
   - Day.js (легковесная)
   - Luxon (от создателей Moment.js)

2. Всегда учитывайте:
   - Месяцы начинаются с 0 (январь=0)
   - Локальный часовой пояс vs UTC
   - Летнее время

3. Для высокоточных измерений используйте performance.now()

4. Для работы с интервалами:
   - setInterval/clearInterval - для повторяющихся действий
   - setTimeout/clearTimeout - для разовых отложенных действий

5. Форматирование:
   - toLocaleString() - для пользовательского интерфейса
   - toISOString() - для передачи на сервер
*/